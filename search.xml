<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Oracle常见问题及其处理方法]]></title>
    <url>%2Fcontent%2F2018%2F01%2F16%2FOracle-%E5%88%97%E8%BD%AC%E8%A1%8C.html</url>
    <content type="text"><![CDATA[记录学习及其工作过程中遇到的问题及其解决方法，目前记录的问题：列转行、自定义排序 行转列pivot 函数： 语法： 123456select * from (...) pivot( sum(value) --这里需要使用聚合函数，要转为行的那一列 for object_type --行转列的标准，依据哪一列进行行转列 in (column) --列转行取值，转化为行后的列标题，并且依照写的顺序排序) 注：该函数是Oracle 11G提供的函数，所以Oracle 11G之前的版本不支持 业务需求，查询各地市订单数量： 原始SQL： 123SELECT TD.CITY_CODE, COUNT(1) CFROM TD_ORD TDGROUP BY TD.CITY_CODE; 显示结果： 123456789101112131415161718CITY_CODE COUNT(1)0532 85590539 53880531 69090634 6180538 14690546 13590632 17930530 22850535 29960536 71740631 18900534 40650543 24320633 32720537 49140635 37960533 3390 使用pivot函数实现列转行 123456SELECT *FROM (SELECT TD.CITY_CODE, COUNT(1) CFROM TD_ORD TDGROUP BY TD.CITY_CODE) T PIVOT(SUM(C) FOR CITY_CODE IN ('0530', '0531', '0532', '0533', '0534', '0535', '0536', '0537', '0538', '0539', '0543', '0546', '0631', '0632', '0633', '0634', '0635')) 实现效果： 12&apos;0530&apos; &apos;0531&apos; &apos;0532&apos; &apos;0533&apos; &apos;0534&apos; &apos;0535&apos; &apos;0536&apos; &apos;0537&apos; &apos;0538&apos; &apos;0539&apos; &apos;0543&apos; &apos;0546&apos; &apos;0631&apos; &apos;0632&apos; &apos;0633&apos; &apos;0634&apos; &apos;0635&apos;2285 6909 8559 3390 4065 2996 7174 4914 1469 5388 2432 1359 1890 1793 3272 618 3796 自定义排序order by decode()函数: 语法 12select * from ... order by (culumn,value1,1,value2,2...) 业务需求，查询各地市数据，根据地市名称按照一定顺序排列，避免了查询后，展示过程中排序问题 代码： 123SELECT TD.CITY_CODE,COUNT(1) FROM TD_ORD TDGROUP BY TD.CITY_CODEORDER BY DECODE(TD.CITY_CODE,'0530', 1,'0531', 2, '0532', 3, '0533', 4, '0534', 5, '0535' , 6, '0536', 7, '0537', 8, '0538', 9, '0539', 10, '0543', 11, '0546', 12, '0631', 13, '0632', 14, '0633', 15, '0634', 16, '0635' 17)]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法]]></title>
    <url>%2Fcontent%2F2018%2F01%2F05%2FMarkdown%E8%AF%AD%E6%B3%95-1.html</url>
    <content type="text"><![CDATA[Markdown：一种适应于网络的书写语言 标题语法在行首插入1到6个 #，对应标题1到6阶。 效果 # h1 ## h2 ### h3 #### h4 ##### h5 ###### h6 区块区块引用使用email形式的 &gt; 角括号 强调使用星号 * 和底线 _ 来标记需要强调的区段，两个效果相同 这行使用一个 *（斜体） 这行使用两个* （粗体） 这行使用一个 _（斜体） 这行使用两个_ （粗体） 列表无序列表语法 使用* 、+ 和 - 作为列表的项目标记，标记与文字之间需有一空格，效果相同 效果 星号列表 加号列表 减号列表 有序列表使用数字加一个英文句号作为项目标记 列表1 列表2 链接行内链接[] 里写链接文字，() 里写链接地址，() 中的&quot;&quot;中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的title文字。 语法 [链接文字](链接地址 &quot;链接标题&quot;) 效果 This is an example link This is an example.link 代码 This is an [example](http://example.com/)` This is an [example](http://example.com/ &quot;Title&quot;) ​ 参考链接一般用在学术论文上面，或者某一个链接在文章中多处使用，就可以对链接进行统一的管理 语法 [链接文字][链接标记] [链接标记]:链接地址 &quot;链接标题&quot; 注：如果链接文字本身可以作为链接标记，也可以写成 [链接标题][] [链接标题]:链接地址 效果 This is baidu 、google 、github 代码 This is [baidu][1] 、[google][google] 、[github][] [1]:http://www.baidu.com &quot;baidu&quot; [google]:http://www.google.com &quot;google&quot; [github]:http://www.github.com 自动链接以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是在 &lt;&gt; 中的就会自动转成链接。 效果 http://linpeilie.me 代码 &lt;http://linpeilie.me&gt; 图片图片的创建方式与超链接相似，而且和超链接一样也有两种写法，行内式和参考式写法。Alt：如果图片因为某些原因不能显示，就用定义的图片Alt文字来代替图片Title：鼠标悬停于图片上时出现的文字,且位于图片下面注：Alt和Title都不是必须的，可以省略，但建议写上 行内式语法 ![图片Alt](图片地址 &quot;图片Title&quot;) 代码 ![头像](https://pic3.zhimg.com/50/v2-e2ae9159cf260da0ae61951bf1926abe_hd.jpg &quot;头像&quot;) 效果 参考式语法在文档要插入图片的地方写 ![图片Alt][标记] 在文档的最后写上 [标记]:图片地址 &quot;Title&quot; 代码 ![头像][avatar] [avatar]:https://pic3.zhimg.com/50/v2-e2ae9159cf260da0ae61951bf1926abe_hd.jpg &quot;头像&quot; 表格语法 不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。 列与列之间用管道符 | 隔开。原生方式的表格每一行的两边也要有管道符。 第二行还可以为不同的列指定对齐方向。默认为左对齐，在 - 右边加上 :就右对齐 简单方式代码 姓名|性别|分数 -|-|- 张三|男|75 李四|女|93 王五|男|83 效果 姓名 性别 分数 张三 男 75 李四 女 93 王五 男 83 如果向右对齐则将第二列改为-|-: 原生方式代码 |姓名|性别|分数| |-|-|-| |张三|男|75| |李四|女|93| |王五|男|83| 效果 姓名 性别 分数 张三 男 75 李四 女 93 王五 男 83 代码插入程序代码的方式有两种：一种是利用缩进(Tab)，另一种是利用引号 ` 来标记代码区段。注：缩进式插入前档必须有空行 行内式代码 Java中的`String`类 效果 Java中的String类 缩进式缩进4个空格或是1个制表符 public static void main(String[] args){ System.out.print(&quot;Hello World&quot;); } 代码高亮可以在代码前后加三个反引号 `，并在后面声明代码为哪种语言 代码 ``` javapublic static void main(String[] args){ System.out.print(“Hello World”);}``` language可以 效果 123public static void main(String[] args)&#123; System.out.print("Hello World");&#125; HTML原始码在代码区块里面，&amp;、&lt;和&gt;会自动转成HTML实体，这样可以在Markdown中比较方便的插入HTML原始码 代码 &lt;div class=&quot;footer&quot;&gt; © 2004 Foo Corporation &lt;/div&gt; 效果 © 2004 Foo Corporation 代码 &lt;table&gt; &lt;tr&gt; &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt; &lt;th&gt;星期一&lt;/th&gt; &lt;th&gt;星期二&lt;/th&gt; &lt;th&gt;星期三&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;张三&lt;/td&gt; &lt;td&gt;李四&lt;/td&gt; &lt;td&gt;王五&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; 效果 值班人员 星期一 星期二 星期三 李强 张明 王平 转义在一些要正常显示其意义的符号前加\ 需要转义的字符 \ 反斜线` 反引号* 星号_ 底线{}花括号[] 方括号() 括号# 井号+ 加号- 减号. 英文句号! 感叹号]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fcontent%2F2017%2F12%2F29%2Fhello-world.html</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
