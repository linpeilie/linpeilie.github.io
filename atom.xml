<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>荆敖晨的个人博客</title>
  
  <subtitle>Java Web技术分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-09T08:03:28.106Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>荆敖晨</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Shiro教程</title>
    <link href="http://yoursite.com/content/2018/01/05/Shiro%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/content/2018/01/05/Shiro教程/</id>
    <published>2018-01-05T15:07:00.000Z</published>
    <updated>2018-01-09T08:03:28.106Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;Shiro是Java的一个安全框架， 相对于Spring Security较为简单。Shiro不但可以用在JavaSE环境，也可以用在JavaEE环境。Shiro可以完成：认证、授权、加密、会话管理、与web继承、缓存等功能。</p><a id="more"></a><h1 id="Shiro功能"><a href="#Shiro功能" class="headerlink" title="Shiro功能"></a>Shiro功能</h1><p><strong>Authentication</strong>：身份认证、登陆，验证用户是不是拥有相应的身份。  </p><p><strong>Authentization</strong>：这个要注意，单词看上去与上面很像。这里指的是授权、即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做某件事情常见的如：验证某个用户是否拥有某个角色。或者验证某个用户对某个资源是否具有某个权限。  </p><p><strong>Session Manager</strong>：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通JavaSE环境的， 也可以是Web环境的。  </p><p><strong>Cryptography</strong>：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储。  </p><p><strong>Web Support</strong>：Web支持，可以非常容易的集成到Web环境。  </p><p><strong>Caching</strong>：缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率。  </p><p><strong>Concurrency</strong>：shiro支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去。</p><p><strong>Testing</strong>：提供测试支持。</p><p><strong>Run As</strong>：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问。</p><p><strong>Remember Me</strong>：记住我，非常常见的功能，即一次登录后，下次访问就不用登录了。</p><h1 id="Shiro组件"><a href="#Shiro组件" class="headerlink" title="Shiro组件"></a>Shiro组件</h1><p><strong>Subject</strong>：主体，可以看作是任何可以与应用交互的“用户”。这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject。如网络爬虫、机器人等。  </p><p><strong>SecurityManager</strong>：相当于SpringMVC中的DispatcherServlet，是Shiro的核心，所有具体的交互都通过SecurityManager进行控制；它管理着所有的Subject，且负责进行认证和授权、会话及缓存的管理。</p><p><strong>Authenticator</strong>：认证器，负责主体认证</p><p><strong>Authtizer</strong>：授权器，或者访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能。  </p><p><strong>Realm</strong>：域，Shiro从Realm获取安全数据（如用户、角色、权限），也就是说SecurityManager要验证身份，那么它需要从Realm获取相应的用户进行比较确定用户身份是否合法；也需要从Realm得到用户相应的角色/权限进行验证用户身份是否合法；可以把Realm看作安全数据源。可以有一个或多个Realm。</p><p><strong>SessionManager</strong>：管理Session的声明周期。</p><p><strong>SessionDAO</strong>：数据访问对象，用户会话的CRUD</p><p><strong>CacheManager</strong>：缓存控制器，管理如用户、角色、权限等缓存，因为这些数据很少改变，所以放入缓存中提高访问的性能。</p><p><strong>Cryptography</strong>：密码模块，提供了一些常见的加密组件用于密码加密/解密。</p><h1 id="Shiro的认证流程"><a href="#Shiro的认证流程" class="headerlink" title="Shiro的认证流程"></a>Shiro的认证流程</h1><h2 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h2><p><strong>身份验证</strong>：在应用中证明是本人，一般提供如他们的身份ID一些标识信息来进行身份验证，最常用如用户名/密码等<br>在Shiro中，用户需要提供principals（身份）和credentials（证明）给shiro，从而验证用户身份。</p><blockquote><p><strong>principals</strong>：身份，即主体的标识数据，可以是任何东西，如用户名、邮箱、手机号等等，唯一即可<br><strong>credentials</strong>：证明/凭证，即只有用户本人知道的安全值，如密码等。</p></blockquote><p>最长见的<strong>principals</strong>和<strong>credentials</strong>组合就是<strong>用户名/密码</strong></p><h3 id="基本认证流程"><a href="#基本认证流程" class="headerlink" title="基本认证流程"></a>基本认证流程</h3><p>1.把用户名和密码封装为<strong><code>UsernamePasswordToken</code></strong>对象<br>2.执行登录，调用<strong><code>Subject</code></strong>的<strong><code>login()</code></strong>方法<br>3.自定义Realm方法，从数据库中获取对应的记录，返回给Shiro<br>4.由Shiro执行密码的对比</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line"><span class="keyword">if</span> (!currentUser.isAuthenticated())&#123;</span><br><span class="line">    logger.info(<span class="string">"username : "</span>+username+<span class="string">" | password : "</span>+password);</span><br><span class="line">    UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username,password);</span><br><span class="line">    token.setRememberMe(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        currentUser.login(token);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (AuthenticationException ae)&#123;</span><br><span class="line">        logger.error(<span class="string">"登录失败 : "</span>+ae.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义Realm实现"><a href="#自定义Realm实现" class="headerlink" title="自定义Realm实现"></a>自定义Realm实现</h3><p>1.继承<strong><code>AuthenticationInfo</code></strong>(仅能实现认证)或<strong><code>AuthorizingRealm</code></strong>(可实现认证和授权)<br>2.重写<strong><code>doGetAuthenticationInfo</code></strong>方法<br>3.把<strong><code>AuthenticationToken</code></strong>转换为<strong><code>UsernamePasswordToken</code></strong><br>4.从UsernamePasswordToken中获取<strong><code>username</code></strong><br>5.调用数据库的方法，从数据库中查询username对应的用户记录<br>6.若用户不存在，则可以抛出<strong><code>UnknownAccountException</code></strong>异常<br>7.根据用户信息的情况，决定是否需要抛出其他的<strong><code>AuthenticationException</code></strong>异常</p><blockquote><p>常见子类：<br>DisabledAccountException(账号禁用)<br>LockedAcountException(账号锁定)<br>UnknownAccountException(账号错误)<br>ExcessiveAttemptsException(登录失败次数过多)<br>8.根据用户的情况，来构建<strong><code>AuthenticationInfo</code></strong>对象并返回，通常使用的实现类为<strong><code>SimpleAuthentnInfo</code></strong>（从数据库中获取的数据）<br><strong><code>principal</code></strong>：认证的实体信息，可以是username，也可以是数据表对应的用户的实体类对象(例如User对象)<br><strong><code>credentials</code></strong>：密码（从数据库中获取的密码）<br><strong><code>realmName</code></strong>：当前realm对象的name，调用父类的getName()方法即可</p></blockquote><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">    logger.info(<span class="string">"开始获取身份验证信息"</span>);</span><br><span class="line">    String username = (String) authenticationToken.getPrincipal();</span><br><span class="line">    User user = userService.selectByUsername(username);</span><br><span class="line">    <span class="keyword">if</span> (user==<span class="keyword">null</span>)&#123;</span><br><span class="line">        logger.error(<span class="string">"根据用户名:"</span>+username+<span class="string">"没有找到账号"</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException();<span class="comment">//没找到账号</span></span><br><span class="line">    &#125;</span><br><span class="line">    SimpleAuthenticationInfo authenticationInfo</span><br><span class="line">            = <span class="keyword">new</span> SimpleAuthenticationInfo(</span><br><span class="line">                    user,</span><br><span class="line">                    user.getPassword(),</span><br><span class="line">            ByteSource.Util.bytes(user.getSalt()),</span><br><span class="line">            getName()</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> authenticationInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="身份授权"><a href="#身份授权" class="headerlink" title="身份授权"></a>身份授权</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;访问控制，即在应用中控制谁能访问哪些资源(如访问页面/编辑数据/页面操作等)<br>&nbsp;&nbsp;&nbsp;&nbsp;授权中几个关键对象：<strong>主体(Subject)</strong>、<strong>资源(Resource)</strong>、<strong>权限(Permission)</strong>、<strong>角色(Role)</strong></p><blockquote><p><strong><code>主体(Subject)</code></strong>:访问应用的用户，在Shiro中使用Subject代表该用户。</p><p><strong><code>资源(Resource)</code></strong>:在应用中用户可以访问的URL，比如访问jsp页面、查看/编辑某些数据、访问某个业务方法等等，用户只有授权后才能访问</p><p><strong><code>权限(Permission)</code></strong>:安全策略中的原子授权单位，通过权限我们可以表示在应用中用户有没有操作某个资源的权利。即权限表示在应用中用户能不能访问某个资源。权限代表了用户有没有操作某个资源的权利，即反映在某个资源上的操作允不允许。<br>&nbsp;&nbsp;&nbsp;&nbsp;Shiro支持粗粒度权限(如用户模块的所有权限)和细粒度权限(操作某个用户的权限，是实例级别的)</p></blockquote><p><strong><code>角色(Role)</code></strong>:权限的集合，一般情况下会赋予用户角色而不是权限， 这样用户可以拥有一组权限，赋予权限时比较方便    </p><blockquote><p><strong>隐式角色</strong>：即直接通过角色来验证用户有没有操作权限。粒度是以角色为单位进行访问控制的，粒度较细粗；如果进行修改可能造成多处代码修改<br><strong>显式角色</strong>:在程序中通过权限控制谁能访问某个资源，假设哪个角色不能访问某个资源，只需要从角色代表的权限集合中移除即可；无须修订多处代码；即粒度是以资源/实例为单位的；粒度较细</p></blockquote><h3 id="授权方式"><a href="#授权方式" class="headerlink" title="授权方式"></a>授权方式</h3><p>1.<strong>编程式</strong>：通过写if/else授权代码块完成。很少用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line"><span class="keyword">if</span>(subject.hasRole(“admin”))&#123;‘</span><br><span class="line"><span class="comment">//有权限</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//无权限</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.<strong>注解式</strong>：通过在执行的Java方法上放置相应的注解完成，没有权限将抛出相应的异常<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresRoles</span>(“admin”)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//有权限</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.<strong>jsp标签</strong>：在jsp页面通过相应的标签完成<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">shiro:hasRole</span> <span class="attr">name</span>=<span class="string">”admin”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!—有权限--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:hasRole</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>基于角色的访问控制(隐式角色)</strong><br>Shiro提供了<strong><code>hasRole</code></strong>/<strong><code>hasAllRole</code></strong>用于判断用户是否拥有某个角色/某些权限；但是没有提供如hasAnyRole用于判断有某些权限中的某一个。<br>Shiro提供的<strong><code>checkRole</code></strong>/<strong><code>checkRoles</code></strong>和hashRole/hasAllRoles不同的地方是它在判断为假的情况下会抛出UnauthorizedException异常。<br>基于角色的访问控制(即隐式角色)缺点就是如果很多地方进行了角色判断，但是有一天不需要了那么就需要修改相应代码把所有相关的地方进行删除；这就是粗粒度造成的问题。<br><strong>基于资源的访问控制（显式角色）</strong><br>Shiro提供了<strong><code>isPermitted</code></strong>和<strong><code>isPermittedAll</code></strong>用于判断用户是否拥有某个权限或所有权限。<br>基于权限的访问控制，这种方法的一般规则是“<strong><code>资源标志符:操作</code></strong>，即是资源级别的粒度；这种方法的好处就是如果要修改基本都是一个资源级别的修改，不会对其他模块代码产生影响，粒度小。但实现可能稍微复杂一些，需要维护”<strong>用户-角色，角色-权限(资源:操作)</strong>“之间的关系</p><h3 id="授权流程"><a href="#授权流程" class="headerlink" title="授权流程"></a>授权流程</h3><blockquote><p>1.自定义Realm实现<strong><code>AuthorizingRealm</code></strong>，重写<strong><code>AuthorizationInfo</code></strong>方法<br>2.从<strong><code>PrincipalCollection</code></strong>中获取登录用户的信息<br>3.利用登录的用户的信息来查询用户当前的角色或权限(在数据库、配置文件中配置)<br>4.创建SimpleAuthorizationInfo,并设置roles属性并返回</p></blockquote><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">    User user = (User) principalCollection.getPrimaryPrincipal();</span><br><span class="line">    <span class="keyword">if</span> (user==<span class="keyword">null</span>)&#123;</span><br><span class="line">        logger.error(<span class="string">"用户为空"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SimpleAuthorizationInfo authorizationInfo</span><br><span class="line">            = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">    Set&lt;String&gt; roles = userService.findRoles(user.getUsername());</span><br><span class="line">    authorizationInfo.setRoles(roles);</span><br><span class="line">    Set&lt;String&gt; permissions = userService.findPermissions(user.getUsername());</span><br><span class="line">    authorizationInfo.setStringPermissions(permissions);</span><br><span class="line">    <span class="keyword">return</span> authorizationInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Shiro标签："><a href="#Shiro标签：" class="headerlink" title="Shiro标签："></a>Shiro标签：</h3><p>1.<strong><code>guest</code></strong>:用户没有身份验证时显示相应信息，即游客访问信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">shiro:guest</span>&gt;</span></span><br><span class="line">欢迎游客访问，<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">”login.jsp”</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:guest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.<strong><code>user</code></strong>:用户已经经过认证/记住我登录后显示相应的信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">shiro:user</span>&gt;</span></span><br><span class="line">欢迎[<span class="tag">&lt;<span class="name">shiro:principal</span>/&gt;</span>]登录，<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">”logout”</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:user</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.<strong><code>authenticated</code></strong>:用户已经身份验证通过，即通过Subjet.login登录成功，不是记住我登录的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">shiro:authenticated</span>&gt;</span></span><br><span class="line">用户[<span class="tag">&lt;<span class="name">shiro:principal</span>/&gt;</span>已身份验证通过</span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:authenticated</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.<strong><code>notAuthenticated</code></strong>:用户未进行身份验证，即没有调用Subject.login进行登录，包括记住我自动登录也属于未进行身份验证</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">shiro:notAuthenticated</span>&gt;</span></span><br><span class="line">未身份验证（包括记住我）</span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:notAuthenticated</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5.<strong><code>principal</code></strong>:显示用户身份信息，默认调用Subject.getPrincipal()获取，即Primary Principal</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">shiro:principal</span> <span class="attr">property</span>=<span class="string">”username”/</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6.<strong><code>hasRole</code></strong>:如果当前Subject有角色将显示body体内内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">shiro:hasRole</span> <span class="attr">name</span>=<span class="string">”admin”</span>&gt;</span></span><br><span class="line">用户[<span class="tag">&lt;<span class="name">shiro:principal</span>/&gt;</span>拥有角色 admin<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:hasRole</span>&gt;</span></span><br></pre></td></tr></table></figure><p>7.<strong>hasAnyRoles`_</strong>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">shiro:hasRole</span> <span class="attr">name</span>=<span class="string">”admin”</span>&gt;</span></span><br><span class="line">用户[<span class="tag">&lt;<span class="name">shiro:principal</span>/&gt;</span>拥有角色 admin<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:hasRole</span>&gt;</span></span><br></pre></td></tr></table></figure><p>8.<strong><code>lacksRole</code></strong>:如果当前Subject没有角色将显示body体内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">shiro:lacksRole</span> <span class="attr">name</span>=<span class="string">”admin”</span>&gt;</span></span><br><span class="line">用户[<span class="tag">&lt;<span class="name">shiro:principal</span>/&gt;</span>]没有角色admin<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:lackRole</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="权限注解"><a href="#权限注解" class="headerlink" title="权限注解"></a>权限注解</h3><blockquote><p><strong><code>@RequiresAuthentication</code></strong>:表示当前Subject已经通过login进行了身份验证，即Subject.isAuthenticated()返回true</p><p><strong><code>@RequiresUser</code></strong>：表示当前Subject已经身份验证或者通过记住我登录的</p><p><strong><code>@RequiresGuest</code></strong>：表示当前Subject没有身份验证或者通过记住我登录的，即是游客身份。</p><p><strong><code>@RequiresRoles(value={“admin”,”user”},logical=Logical.AND)</code></strong>：表示当前Subject需要角色admin和user，如果将Logical.AND改为Logical.OR则表示需要角色admin或user</p></blockquote><h1 id="会话Session"><a href="#会话Session" class="headerlink" title="会话Session"></a>会话Session</h1><p>Shiro提供了完整的企业级会话管理工具，不依赖底层容器(如web容器tomcat),不管JavaSE还是JavaEE管径都可以使用,提供了<strong>会话管理</strong>、<strong>会话监听</strong>、<strong>会话存储/持久化</strong>、<strong>容器无关的集群</strong>、<strong>失效\过期支持</strong>、<strong>对web的透明支持</strong>、<strong>SSO单点登录的支持</strong>等特性。</p><p>相关方法：</p><blockquote><p><strong><code>Subject.getSession()</code></strong>:即可获取会话；其等价于Subject.getSession(true)，即如果当前没有Session对象会创建一个；Subject.getSession(false)，如果当前没有创建Session则返回null<br><strong><code>session.getId()</code></strong>:获取当前会话的唯一标识<br><strong><code>session.getHost()</code></strong>:获取当前Subject的主机地址<br><strong><code>session.getTimeout()</code></strong> &amp; <strong><code>session.setTimeout(毫秒)</code></strong>:获取/设置当前Session的过期时间<br><strong><code>session.getStartTimestamp()</code></strong> &amp; <strong><code>session.setLastAccessTime()</code></strong>:获取会话的启动时间及最后访问时间；如果是JavaEE应用需要自己定期调用session.touch()去更新最后的访问时间<br><strong><code>session.touch()</code></strong> &amp; <strong><code>session.stop()</code></strong>:更新会话最后访问时间及销毁会话；当Subject.logout()时会自动调用stop()方法来销毁会话。如果在wb中，调用HttpSession.invalidate()也会自动调用Shiro Session.stop()方法进行销毁shiro的会话。<br><strong><code>session.setAttribute(key,value)</code></strong><br><strong><code>session.getAttribute(key)</code></strong><br><strong><code>session.removeAttribute(key)</code></strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;Shiro是Java的一个安全框架， 相对于Spring Security较为简单。Shiro不但可以用在JavaSE环境，也可以用在JavaEE环境。Shiro可以完成：认证、授权、加密、会话管理、与web继承、缓存等功能。&lt;/p&gt;
    
    </summary>
    
      <category term="Shiro" scheme="http://yoursite.com/categories/Shiro/"/>
    
    
      <category term="Shiro" scheme="http://yoursite.com/tags/Shiro/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="http://yoursite.com/content/2018/01/05/Markdown%E8%AF%AD%E6%B3%95-1/"/>
    <id>http://yoursite.com/content/2018/01/05/Markdown语法-1/</id>
    <published>2018-01-05T06:15:00.000Z</published>
    <updated>2018-01-05T13:11:58.797Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Markdown：一种适应于网络的书写语言</strong></p><a id="more"></a><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p><strong>语法</strong><br>在行首插入1到6个 <strong><code>#</code></strong>，对应标题1到6阶。</p><p><strong>效果</strong> </p><pre><code># h1## h2### h3#### h4##### h5###### h6</code></pre><h1 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h1><p>区块引用使用email形式的 <strong><code>&gt;</code></strong> 角括号</p><h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><p>使用星号 <strong><code>*</code></strong> 和底线 <strong><code>_</code></strong> 来标记需要强调的区段，两个效果相同</p><blockquote><p><em>这行使用一个</em> *（斜体）</p><p><strong>这行使用两个*</strong> （粗体）</p><p><em>这行使用一个</em> _（斜体）</p><p><strong>这行使用两个_</strong> （粗体）</p></blockquote><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p><strong>语法</strong></p><p>使用<strong><code>*</code></strong> 、<strong><code>+</code></strong> 和 <strong><code>-</code></strong> 作为列表的项目标记，标记与文字之间需有一空格，效果相同</p><p><strong>效果</strong></p><blockquote><ul><li>星号列表</li><li>加号列表</li><li>减号列表</li></ul></blockquote><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>使用<code>数字</code>加一个<code>英文句号</code>作为项目标记</p><blockquote><ol><li>列表1</li><li>列表2</li></ol></blockquote><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><h2 id="行内链接"><a href="#行内链接" class="headerlink" title="行内链接"></a>行内链接</h2><p><strong><code>[]</code></strong> 里写链接文字，<strong><code>()</code></strong> 里写链接地址，<strong><code>()</code></strong> 中的<code>&quot;&quot;</code>中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的title文字。</p><p><strong>语法</strong></p><pre><code>[链接文字](链接地址 &quot;链接标题&quot;)</code></pre><p><strong>效果</strong></p><blockquote><p>This is an <a href="http://example.com/" target="_blank" rel="noopener">example link</a></p><p>This is an <a href="http://example.com/" title="Title" target="_blank" rel="noopener">example.link</a></p></blockquote><p><strong>代码</strong></p><pre><code>This is an [example](http://example.com/)`This is an [example](http://example.com/ &quot;Title&quot;)</code></pre><p>​    </p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>一般用在学术论文上面，或者某一个链接在文章中多处使用，就可以对链接进行统一的管理</p><p><strong>语法</strong></p><pre><code>[链接文字][链接标记][链接标记]:链接地址 &quot;链接标题&quot;</code></pre><p>注：如果链接文字本身可以作为链接标记，也可以写成</p><pre><code>[链接标题][][链接标题]:链接地址</code></pre><p><strong>效果</strong></p><blockquote><p>This is <a href="http://www.baidu.com" title="baidu" target="_blank" rel="noopener">baidu</a> 、<a href="http://www.google.com" title="google" target="_blank" rel="noopener">google</a> 、<a href="http://www.github.com" target="_blank" rel="noopener">github</a></p></blockquote><p><strong>代码</strong></p><pre><code>This is [baidu][1] 、[google][google] 、[github][][1]:http://www.baidu.com &quot;baidu&quot;[google]:http://www.google.com &quot;google&quot;[github]:http://www.github.com</code></pre><h2 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h2><p>以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是在 <strong><code>&lt;&gt;</code></strong> 中的就会自动转成链接。</p><p><strong>效果</strong></p><blockquote><p><a href="http://linpeilie.me" target="_blank" rel="noopener">http://linpeilie.me</a></p></blockquote><p><strong>代码</strong></p><pre><code>&lt;http://linpeilie.me&gt;</code></pre><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>图片的创建方式与超链接相似，而且和超链接一样也有两种写法，行内式和参考式写法。<br>Alt：如果图片因为某些原因不能显示，就用定义的图片Alt文字来代替图片<br>Title：鼠标悬停于图片上时出现的文字,且位于图片下面<br><em>注：Alt和Title都不是必须的，可以省略，但建议写上</em></p><h2 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h2><p><strong>语法</strong>  </p><pre><code>![图片Alt](图片地址 &quot;图片Title&quot;)</code></pre><p><strong>代码</strong></p><pre><code>![头像](https://pic3.zhimg.com/50/v2-e2ae9159cf260da0ae61951bf1926abe_hd.jpg &quot;头像&quot;)</code></pre><p><strong>效果</strong></p><p><img src="https://pic3.zhimg.com/50/v2-e2ae9159cf260da0ae61951bf1926abe_hd.jpg" alt="头像" title="头像"></p><h2 id="参考式"><a href="#参考式" class="headerlink" title="参考式"></a>参考式</h2><p><strong>语法</strong><br>在文档要插入图片的地方写</p><pre><code>![图片Alt][标记]</code></pre><p>在文档的最后写上</p><pre><code>[标记]:图片地址 &quot;Title&quot;</code></pre><p><strong>代码</strong>  </p><pre><code>![头像][avatar][avatar]:https://pic3.zhimg.com/50/v2-e2ae9159cf260da0ae61951bf1926abe_hd.jpg &quot;头像&quot;</code></pre><p><img src="https://pic3.zhimg.com/50/v2-e2ae9159cf260da0ae61951bf1926abe_hd.jpg" alt="头像"></p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p><strong>语法</strong></p><ul><li><strong>不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。</strong></li><li><p>列与列之间用管道符 <strong><code>|</code></strong> 隔开。原生方式的表格每一行的两边也要有管道符。</p></li><li><p>第二行还可以为不同的列指定对齐方向。默认为左对齐，在 <strong><code>-</code></strong> 右边加上 <strong><code>:</code></strong>就右对齐</p></li></ul><h2 id="简单方式"><a href="#简单方式" class="headerlink" title="简单方式"></a>简单方式</h2><p><strong>代码</strong></p><pre><code>姓名|性别|分数-|-|-张三|男|75李四|女|93王五|男|83</code></pre><p> <strong>效果</strong></p><table><thead><tr><th>姓名</th><th>性别</th><th>分数</th></tr></thead><tbody><tr><td>   张三</td><td>男</td><td>75</td></tr><tr><td>   李四</td><td>女</td><td>93</td></tr><tr><td>   王五</td><td>男</td><td>83</td></tr></tbody></table><blockquote><p>如果向右对齐则将第二列改为-|-:</p></blockquote><h2 id="原生方式"><a href="#原生方式" class="headerlink" title="原生方式"></a>原生方式</h2><p><strong>代码</strong></p><pre><code>|姓名|性别|分数||-|-|-||张三|男|75||李四|女|93||王五|男|83|</code></pre><p><strong>效果</strong></p><table><thead><tr><th>姓名</th><th>性别</th><th>分数</th></tr></thead><tbody><tr><td>张三</td><td>男</td><td>75</td></tr><tr><td>李四</td><td>女</td><td>93</td></tr><tr><td>王五</td><td>男</td><td>83</td></tr></tbody></table><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>插入程序代码的方式有两种：一种是利用缩进(Tab)，另一种是利用<br>引号 <strong>`</strong> 来标记代码区段。<br><em>注：缩进式插入前档必须有空行</em></p><h2 id="行内式-1"><a href="#行内式-1" class="headerlink" title="行内式"></a>行内式</h2><p><strong>代码</strong></p><pre><code>Java中的`String`类</code></pre><p><strong>效果</strong></p><p>Java中的<code>String</code>类</p><h2 id="缩进式"><a href="#缩进式" class="headerlink" title="缩进式"></a>缩进式</h2><p>缩进4个空格或是1个制表符</p><pre><code>public static void main(String[] args){    System.out.print(&quot;Hello World&quot;);}</code></pre><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><p>可以在代码前后加三个<strong>反引号 `</strong>，并在后面声明代码为哪种语言</p><p><strong>代码</strong></p><blockquote><p>``` java<br>public static void main(String[] args){<br>    System.out.print(“Hello World”);<br>}<br>```   </p></blockquote><p>language可以</p><p><strong>效果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.print(<span class="string">"Hello World"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTML原始码"><a href="#HTML原始码" class="headerlink" title="HTML原始码"></a>HTML原始码</h2><p>在代码区块里面，&amp;、&lt;和&gt;会自动转成HTML实体，这样可以在Markdown中比较方便的插入HTML原始码</p><p><strong>代码</strong></p><pre><code>&lt;div class=&quot;footer&quot;&gt;    © 2004 Foo Corporation&lt;/div&gt;</code></pre><p><strong>效果</strong></p><p><div class="footer"><br>    © 2004 Foo Corporation<br></div></p><hr><p><strong>代码</strong></p><pre><code>&lt;table&gt;    &lt;tr&gt;        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;        &lt;th&gt;星期一&lt;/th&gt;        &lt;th&gt;星期二&lt;/th&gt;        &lt;th&gt;星期三&lt;/th&gt;   &lt;/tr&gt;   &lt;tr&gt;       &lt;td&gt;张三&lt;/td&gt;       &lt;td&gt;李四&lt;/td&gt;       &lt;td&gt;王五&lt;/td&gt;   &lt;/tr&gt;&lt;/table&gt;</code></pre><p><strong>效果</strong></p><table><br>    <tr><br>       <th rowspan="2">值班人员</th><br>       <th>星期一</th><br>       <th>星期二</th><br>       <th>星期三</th><br>  </tr><br>  <tr><br>       <td>李强</td><br>       <td>张明</td><br>       <td>王平</td><br>  </tr><br></table><h1 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h1><p>在一些要正常显示其意义的符号前加<strong><code>\</code></strong></p><p><strong>需要转义的字符</strong></p><blockquote><p>\ 反斜线<br>` 反引号<br>* 星号<br>_ 底线<br>{}花括号<br>[] 方括号<br>() 括号<br># 井号<br>+ 加号<br>- 减号<br>. 英文句号<br>! 感叹号</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Markdown：一种适应于网络的书写语言&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/content/2017/12/29/hello-world/"/>
    <id>http://yoursite.com/content/2017/12/29/hello-world/</id>
    <published>2017-12-29T11:43:16.439Z</published>
    <updated>2017-12-29T11:43:16.439Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
